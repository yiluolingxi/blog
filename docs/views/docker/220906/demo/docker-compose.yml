version: '3'

services:
  reverse-proxy:
    image: traefik:v2.5
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./traefik.toml:/etc/traefik/traefik.toml
      - ./acme.json:/acme.json
      - ./log:/log
      - /var/run/docker.sock:/var/run/docker.sock
    container_name: traefik
    env_file: .env
    labels:
      - "traefik.http.routers.api.rule=Host(`traefik.firefly.com`)"
      - "traefik.http.routers.api.service=api@internal"

      # 配置 TLS
      - traefik.http.routers.cra.tls=true
      - traefik.http.routers.cra.tls.certresolver=le


# 该镜像会暴露出自身的 `header` 信息
  whoami:
    image: containous/whoami
    labels:
      # 设置Host 为 whoami.docker.localhost 进行域名访问
      - "traefik.http.routers.whoami.rule=Host(`whoami.firefly.com`)"

      # 配置 TLS
      - traefik.http.routers.cra.tls=true
      - traefik.http.routers.cra.tls.certresolver=le

  # domain:
  #   image: containous/whoami
  #   labels:
  #     # 配置域名
  #      - "traefik.http.routers.cra.rule=Host(`cra.firefly.tech`)"

  #      # 配置 TLS
  #      - traefik.http.routers.cra.tls=true
  #      - traefik.http.routers.cra.tls.certresolver=le

# 使用已存在的 traefik 的 network
networks:
  default:
    external:
      name: demo_default